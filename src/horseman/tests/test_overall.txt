API utilities
*************

  >>> USERS = {}

  >>> from horseman.validation import Validator
  >>> from horseman.response import reply
  >>> from schema import And

  >>> user_validator = Validator([
  ... {'username': And(str, lambda s: len(s) > 6)}])

  >>> @user_validator
  ... def UserDetails(action_request, overhead):
  ...
  ...     user_details = USERS.get(action_request.username)
  ...     if user_details is not None:
  ...         return reply(200, text=json.dumps(user_details),
  ...                      content_type="application/json")
  ...
  ...     return reply(404, text="User not found.")

  >>> from schema import Optional
  >>> user_listing_validator = Validator([
  ... {'departments': Optional([str])}])

  >>> import json
  >>> @user_listing_validator
  ... def UsersListing(action_request, overhead):
  ...
  ...     listing = []
  ...     for username, details in USERS.items():
  ...         if not action_request.departments:
  ...             listing.append({username: details})
  ...         elif set(action_request.departments) & set(details['departments']):
  ...             listing.append({username: details})
  ...     if action_request.departments and not listing:
  ...         return reply(404, text="No matching users found.")
  ...     return reply(200, text=json.dumps(listing),
  ...                  content_type="application/json")

  >>> UsersModule = {
  ...     '/details': UserDetails,
  ...     '/list': UsersListing,
  ... }

  >>> from horseman.components import Endpoint
  >>> users_endpoint = Endpoint(UsersModule)

  >>> from webtest import TestApp
  >>> app = TestApp(users_endpoint)

  >>> resp = app.get('/', expect_errors=True)
  >>> resp.status
  '400 Bad Request'
  >>> resp.text
  'Provided action does not exist. Please consult the API documentation.'

  >>> resp = app.post('/details', expect_errors=True)
  >>> resp.status
  '400 Bad Request'
  >>> resp.text
  '`username`: Required input is missing.'

  >>> resp = app.post(
  ...     '/details', {'username': 'Alexandra'}, expect_errors=True)
  >>> resp.status
  '404 Not Found'
  >>> resp.text
  'User not found.'

  >>> resp = app.post('/add', {'username': 'Alexandra', 'departments': ['Psychology', 'Cooking']}, expect_errors=True)
  >>> resp.status
  '201 Created'

  >>> resp = app.post('/add', {'username': 'Alexandra', 'departments': ['Psychology', 'Cooking']}, expect_errors=True)
  >>> resp.status
  '409 Conflict'

  >>> resp = app.post('/list', expect_errors=True)
  >>> resp.status
  '405 Method Not Allowed'
  >>> resp.text
  '405 Method Not Allowed\n\nThe method POST is not allowed for this resource. \n\n '

  >>> resp = app.get('/list')
  >>> resp.json
  [{'Alexandra': {'departments': ['Psychology', 'Cooking']}}]

  >>> resp = app.get('/list?departments=Cooking')
  >>> resp.json
  [{'Alexandra': {'departments': ['Psychology', 'Cooking']}}]

  >>> resp = app.get('/list?departments=Cooking&departments=Sports')
  >>> resp.json
  [{'Alexandra': {'departments': ['Psychology', 'Cooking']}}]

  >>> resp = app.get('/list?departments=Dancing', expect_errors=True)
  >>> resp.status
  '404 Not Found'
  >>> resp.text
  'No matching users found.'
